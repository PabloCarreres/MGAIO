pipeline {
agent { label 'slave-pl' }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '7', artifactNumToKeepStr: '7', daysToKeepStr: '7', numToKeepStr: '7')
    }
    environment {
        BRANCH = 'develop' 
        GIT_URL = 'https://merca-logis.pl.s2-eu.capgemini.com/gitlab/almacenar/mgaios_online.git' 
        GIT_USER_ID = 'cbd658e0-971f-4c6d-b786-4ee9ee5659dc'
        MAVEN_SETTINGS_ID = 'logis-nexus-cap' 
        MAVEN_INSTALLATION_ID = 'Maven363' 
        JAVA_INSTALLATION_ID = 'java8' 
        SONAR_SERVER_ID = 'sonarqube'
        DEPENDENCY_CHECK_INSTALLATION_ID = 'dep-check-6.1.1'
        NODE_JS_INSTALLATION_ID = 'NodeJS LTS'
        NEXUS_CREDENTIAL_ID = "cbd658e0-971f-4c6d-b786-4ee9ee5659dc"

    }
    tools {nodejs env.NODE_JS_INSTALLATION_ID}
    stages {
        stage('Code checkout') {
            steps {
                script {
                    git credentialsId: env.GIT_USER_ID, url: env.GIT_URL, branch: env.BRANCH
                }
            }
        }
        stage('Build') {
            steps {
                withMaven(
                    mavenSettingsConfig: env.MAVEN_SETTINGS_ID,
                    mavenLocalRepo: '.repository',
                    maven: env.MAVEN_INSTALLATION_ID,
                    jdk:env.JAVA_INSTALLATION_ID)
                    {
                        sh "mvn clean package -e -X"
                    }
            }
        }
        
       stage('Dependency Check'){
	        steps{
	            sh "mkdir -p build/owasp"
	            dependencyCheck additionalArguments: '--out build/owasp/ --format XML --format JSON --format HTML --format CSV', odcInstallation: env.DEPENDENCY_CHECK_INSTALLATION_ID
	            dependencyCheckPublisher pattern: 'build/owasp/dependency-check-report.xml'
	        }
	        
         }
    
     
        stage("Publish to nexus") {
            steps {
              withCredentials([usernameColonPassword(credentialsId: env.NEXUS_CREDENTIAL_ID, variable: 'USERPASS')]) {  
                script{
                   sh 'curl -v -u "$USERPASS" -F "maven2.asset1=@/home/pl/workspace/MGAIOS/modules/mgaios-ear/target/mgaios.ear" -F "maven2.asset1.extension=ear" -F "maven2.asset2=@/home/pl/workspace/MGAIOS/pom.xml" -F "maven2.asset2.extension=pom" "https://merca-logis.pl.s2-eu.capgemini.com/nexus3/service/rest/v1/components?repository=weblogic-deploy"'
                   env.VERSION = readMavenPom().getVersion()
                   echo "${VERSION}"
                }
              }
            }
        }
        

        stage('Downloading from Nexus') {
            agent { label 'jenkins-gesaduan' }
              steps {
                withCredentials([usernameColonPassword(credentialsId: env.NEXUS_CREDENTIAL_ID, variable: 'USERPASS')]) {
                    script{
                          echo "${VERSION}"
                    }
        			sh '''
        			set +x
                    curl -u "$USERPASS" https://merca-logis.pl.s2-eu.capgemini.com/nexus3/repository/weblogic-deploy/es/mercadona/mgaios/mgaios/${VERSION}/mgaios-${VERSION}.ear > /home/oracle/workspace/MGAIOS/modules/mgaios-ear/target/mgaios.ear
        	
        			'''
        		}	
             }
         }
        stage('Deploy') {
         agent { label 'jenkins-gesaduan'}
             steps {
                sh'''
                . /opt/srv/app/wls12214/wlserver/server/bin/setWLSEnv.sh
                java -Xms1024m -Xmx2048m weblogic.Deployer -adminurl t3://10.80.89.243:10003 -username weblogic -password welcome1 -redeploy -source /home/oracle/workspace/MGAIOS/modules/mgaios-ear/target/mgaios.ear -verbose -name mgaios
                '''
                }
            }         
       stage('Analisys with SonarQube') {
           steps {
               script {
               def scannerHome = tool env.SONAR_SERVER_ID;
               	    withSonarQubeEnv(env.SONAR_SERVER_ID) {
                   
                   		sh "${tool(env.SONAR_SERVER_ID)}/bin/sonar-scanner \
                		-Dsonar.projectKey=logistico.almacena.mgaios_online \
            			-Dsonar.sources=. \
            			-Dsonar.projectVersion=2.2.3 \
            			-Dsonar.css.node=. \
            			-Dsonar.host.url=http://sonarqube-core:9000/sonarqube \
            			-Dsonar.sourceEncoding=UTF-8 \
            			-Dsonar.java.binaries=. \
            			-Dsonar.projectBaseDir=. \
            			-Dsonar.sources=. \
            			-Dsonar.exclusions=/**/target/**/*,/**/build/owasp/**/* \
            			-Dsonar.dependencyCheck.jsonReportPath=build/owasp/dependency-check-report.json \
                        -Dsonar.dependencyCheck.xmlReportPath=build/owasp/dependency-check-report.xml \
                        -Dsonar.dependencyCheck.htmlReportPath=build/owasp/dependency-check-report.html \
            			-Dsonar.projectName=MGAIOS_ONLINE"
        
                    }
                }
            }
        }

            
    }
    post { 
           always { 
                cleanWs()
            }
            failure {  
            echo "Fallo"
            office365ConnectorSend color: 'FF0000', message: 'Ha ocurrido un error', status: 'Failure', webhookUrl: 'https://capgemini.webhook.office.com/webhookb2/58b1490e-76f6-4cca-9bad-348bb8264cfc@76a2ae5a-9f00-4f6b-95ed-5d33d77c4d61/JenkinsCI/b31a88af8d9348889b7a763ff7e5abfd/14625e70-12f8-4132-817f-0694676ee342'
          echo "Stop vpn mercadona"
        sh '''
        cd /opt/devops/enlace
        ./vpn_mercadona stop
        systemctl restart network
        '''
                
            }  
            
    }
   
}
